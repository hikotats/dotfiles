let mapleader = "\<Space>"
let hatebloUrl = "http://blog.hatena.ne.jp/sekilberg/ratatatat30.hatenablog.jp/entries"

" .vimrcを瞬時に開く
" nnoremap <Space><Space>. :e $MYVIMRC<CR>
nnoremap <Leader>. :<C-u>tabedit $MYVIMRC<CR>
" keymapを開く
nnoremap <Leader>, :<C-u>tabedit ~/dotfiles/vimrc.keymap<CR>
" pluginsを開く
nnoremap <Leader>; :<C-u>tabedit ~/dotfiles/vimrc.plugins<CR>

" vimrcの設定を反映
nnoremap <Leader><Leader>.. :<C-u>source $MYVIMRC<CR>

" snippetを瞬時に開く
nnoremap <Leader>\ :<C-u>tabedit ~/.vim/bundle/vim-snippets/snippets/<CR>
nnoremap <Leader>ns :execute "tabnew\|:NeoSnippetEdit ".&filetype<CR>
nnoremap <Leader>vs :execute "vnew ~/.vim/bundle/vim-snippets/snippets/"<CR>

nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>
nnoremap Q :<C-u>help 

" ファイルを保存する
nnoremap <Leader>w :w<CR>
" 新しいファイルを開く
nnoremap <Leader>o :CtrlP<CR>
" ファイルを閉じる
nnoremap <Leader>q :q<CR>
" 新規垂直タブ
nnoremap <Leader>v :vnew<CR>
" 新規平行タブ
nnoremap <Leader>n :new<CR>
" Enterで改行 insert
nnoremap <CR> o
nnoremap <S-CR> O

" 検索のハイライトを消す
nnoremap <ESC><ESC> :noh<CR>

" システムのクリップボードにコピー＆ペーストする
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" ビジュアルラインモードに切り替える
nmap <Leader><Leader> V

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
"
" insertモードから抜ける
inoremap <silent> <C-c> <ESC>
inoremap <silent> ;; <ESC>

" ノーマルモード時だけ ; と : を入れ替える
nnoremap ; :
nnoremap : ;

" 行末までのヤンクにする
nnoremap Y y$

" インクリメント
nnoremap + <C-a><Left> 
" デクリメント
nnoremap - <C-x><Left>

" 挿入モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-a> <HOME>
nnoremap <C-a> <HOME>
inoremap <C-e> <END>
nnoremap <C-e> <END>
inoremap <C-f> <Right>
inoremap <C-b> <BS>
inoremap <C-d> <Del>

" Tab navigation
nnoremap <C->>    :tabprevious<CR>
nnoremap <C-Right>    :tabnext<CR>
nnoremap <C-t> :tabnew<CR>
inoremap <C-Left>    <Esc>:tabprevious<CR>i
inoremap <C-Right>    <Esc>:tabnext<CR>i
inoremap <C-t> <Esc>:tabnew<CR>noremap <silent> <C-_><Tab> gt

" 引用符, 括弧の設定 
inoremap { {}<Left>
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap " ""<Left>
inoremap ' ''<Left>
vnoremap { "zdi{<C-R>z}<ESC>
vnoremap [ "zdi[<C-R>z]<ESC>
vnoremap ( "zdi(<C-R>z)<ESC>
vnoremap " "zdi"<C-R>z"<ESC>
vnoremap ' "zdi'<C-R>z'<ESC>

nnoremap [q :cprevious<CR>   " 前へ
nnoremap ]q :cnext<CR>       " 次へ
nnoremap [Q :<C-u>cfirst<CR> " 最初へ
nnoremap ]Q :<C-u>clast<CR>  " 最後へ

inoremap <C-c> <Esc>
vnoremap <C-p> "0p<CR>"
" NERDTreeToggle 
nnoremap <silent><Leader>e :NERDTreeToggle<CR>
" \lでtaglistウインドウを開いたり閉じたり出来るショートカット"
nmap  <Leader>l :TagbarToggle<CR>

" ctrl + / で選択範囲のコメントアウト切り替え
nmap <C-_> <Plug>(caw:i:toggle)
vmap <C-_> <Plug>(caw:i:toggle)

" ,is: シェルを起動
nnoremap <silent> <Leader>is :VimShell<CR>

" diff
nnoremap <Leader>df :vertical diffsplit

" 翻訳
nnoremap <silent> tr :<C-u>ExciteTranslate<CR>

nnoremap <Leader>js :set filetype=javascript<CR>
nnoremap <Leader>html :set filetype=html<CR>
nnoremap <Leader>md :set filetype=markdown<CR>
nnoremap <Leader>c :set filetype=c<CR>
nnoremap <Leader>cpp :set filetype=cpp<CR>
nnoremap <Leader>php :set filetype=php<CR>
nnoremap <Leader>sc :set filetype=sc<CR>

" memolist keymap
" メモ関連マッピング
nnoremap MN :MemoNew
nnoremap ML :MemoList
nnoremap MF :MemoFiler
nnoremap MG :MemoGrep

nnoremap VF :VimFiler
nnoremap VS :VimShell
nnoremap PO :PrevimOpen

nnoremap HC :HatebloCreate
nnoremap HD :HatebloCreateDraft
nnoremap HB :execute "OpenBrowser ".hatebloUrl

" expand path
cmap <c-x> <c-r>=expand('%:p:h')<cr>/
" expand file (not ext)
cmap <c-z> <c-r>=expand('%:p:r')<cr>

" CtrlP
nnoremap <Leader>a :<C-u>CtrlP<Space>
" バッファセレクタとして使えます。
nnoremap <Leader>b :<C-u>CtrlPBuffer<CR>
" ディレクトリを検索してカレントディレクトリを切り替えたりできます。
nnoremap <Leader>d :<C-u>CtrlPDir<CR>
nnoremap <Leader>f :<C-u>CtrlP<CR>
" これまで開いたファイル履歴から絞り込みます。
nnoremap <Leader>m :<C-u>CtrlPMRUFiles<CR>
" 現在のファイル内の各行を対象に絞り込みます。
nnoremap <Leader>l :<C-u>CtrlPLine<CR>
let g:ctrlp_map = '<Nop>'

" Unite keymap
" prefix keyの設定
nnoremap [unite] <Nop>
nmap <Leader>u [unite]
" バッファ一覧
noremap <C-P> :Unite buffer<CR>
" カレントディレクトリを表示
nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" バッファと最近開いたファイル一覧を表示
nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer file_mru<CR>
" 最近開いたディレクトリを表示
nnoremap <silent> [unite]d :<C-u>Unite<Space>directory_mru<CR>
" ブックマークを表示
nnoremap <silent> [unite]b :<C-u>Unite<Space>bookmark<CR>
" レジストリを表示
nnoremap <silent> [unite]r :<C-u>Unite<Space>register<CR>
" タブを表示
nnoremap <silent> [unite]t :<C-u>Unite<Space>tab<CR>
" ヒストリ/ヤンクを表示
nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
" outline
nnoremap <silent> [unite]o :<C-u>Unite<Space>outline<CR>
" file_rec:!
nnoremap <silent> [unite]<CR> :<C-u>Unite<Space>file_rec:!<CR>
" unite.vimを開いている間のキーマッピング
autocmd FileType unite call s:unite_my_settings() 
  function! s:unite_my_settings()   
  " ESCでuniteを終了
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" HTMLをJavaScript連結文字列に変換
vmap <silent> ;h :s?^\(\s*\)+ '\([^']\+\)',*\s*$?\1\2?g<CR>
vmap <silent> ;q :s?^\(\s*\)\(.*\)\s*$? \1 + '\2'?<CR>

function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()
