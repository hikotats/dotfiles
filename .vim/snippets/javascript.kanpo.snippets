snippet provisioning

	import api from '../../../common/api';
	import View from '../../../ui/View';
	import {showWindow} from '../../../ui/Window';

	const API_CREATE = '/api/${1: フォルダ名}/create/';
	const API_UPDATE = '/api/$1/update/';
	const API_DELETE = '/api/$1/delete/';

snippet im$
	import $ from 'jquery';
snippet imassign
	import assign from 'lodash/object/assign';
snippet imget
	import get from 'lodash/object/get';
snippet imset
	import set from 'lodash/object/set';
snippet imfilter
	import filter from 'lodash/collection/filter';
snippet imfind
	import find from 'lodash/collection/find';
snippet imforEach
	import forEach from 'lodash/collection/forEach';
snippet immap
	import map from 'lodash/collection/map';
snippet imreduce
	import reduce from 'lodash/collection/reduce';

# method
snippet m
	/**${1}
	${2:method}(${3}) {
		${0}
	}


snippet m_load
options word
	/**
	 * APIロード
	 */
	load() {
		${0}
	}


snippet m_render
options word
	render() {
		morphdom(this.el, \`<div>${this.template(this)}</div>\`, {childrenOnly: true});
		return this;
	}


# common
# api module
snippet api
	api(${1:API_URL_PATH}, {
		storeId: APP.storeId${2}
	}apierr${3}).done(() => {
		this.model.commit();
		toast${4}
		${0}
	});


snippet apierr
options word
	, {
		// indicator: ${3},
		// errorTitle: '${4:errorTitle}',
		errorMessage${5},
		// showErrorDialog: ${6}
	}

snippet errorMessage
	errorMessage: data => {
		return {
			message+${0}
		}[data.returnCode];
	}

snippet message+
	${1}: message.W00${2}(),
	message+${0}


snippet cookie
	cookie.remove('${1}')

snippet loading
	loading.${1:show|hide}();


# Model Class
snippet Model
	import Model from 'common/Model';

	/**
	 * ${1:モデル名}
	 */
	export default class ${2:ModelName} extends Model {

		// get idAttribute() {
		// 	return '${3}';
		// }

		get defaults() {
			return {
				${0}
			};
		}
	}


# SiteCatalyst module
snippet sci
	sc.init('${1}', '${0}');
	sc.pageView();
snippet sca
	sc.action('${0}');


# View Class
snippet View
	/**
	 * ${1:画面名}
	 */
	export default class ${2} extends View {

		constructor(${3}) {
			super({
				opt${4}
			});
			// this
				// .on+

			// this.load().fail(a${5})
		}


		m_render${6}


		m_load${0}
	}


snippet opt
	id: '${1}',
	className: '${2}',
	// el: '${3}',
	// title: '${4}'
	template: require('./${5}.ejs'),
	model: ${6},
	// search: {${7}},
	events: {
		ev+${0}
	}


# module
# snippet number
snippet dateFormat
options word
	dateFormat('${1}', ${0})
# snippet device
# 	device.isApp()
# snippet mode
# snippet regExpSjis

snippet sto_get
options word
	storage.get('${1}')

snippet sto_set
options word
	storage.set('${1}', {
		${0}
	})

snippet timeformat
options word
	timeFormat('${1:YYYY/MM/DD}', ${0})

# snippet userAgent
snippet validate
	validate(${0})


# ui
# ui/dialog
snippet dialog
	dialog({
		opt_dialog${1}
	});${0}

snippet opt_dialog
options word
	// id: ${1}
	title: '${2}',
	message: ${3},
	confirm: true,
	// model: {${4}},
	// opt_btns${5}
	// autoClose: ${0}

snippet opt_btns
	buttons: [
		{
			className: 'cancel',
			title: '編集を続ける',
			action: 'dismiss'
		},
		{
			className: 'primary',
			title: '${1}',
			action: 'ok'
		}
	],

snippet moveAlertDialog
options word
	if (this.model.changed) {
		return moveAlertDialog().promise;
	}

snippet toast
	toast('${1:メッセージ}')

snippet editableList
	new EditableList({
		id: '${1}',
		el: '${2}',
		itemTemplate: require('${3}.ejs'),
		type: ${4}
	})
	.on(${0})


# ui/form
snippet valid
	if (!validate(this.$el)) {
		this.$el.find('.error:first').focus();
		return false;
	}


# snippet Table
snippet Window
	Window({
		id: ${1},
		title: ${2},
		size: ${3:device.isAPP() ? 'full' : ''},
		template: ${4:require('./foo.ejs')},
		imgfile: ${5:'bar.png'},
		buttons: '',
	}).on('close', () => location.replace(${6:path})).show();
# snippet dateField
# snippet help
# snippet link
# snippet placeholder
# snippet select
# snippet toggle


# utilities
snippet model.
options word
	this.model.${0}

snippet ef
options word
	this.$el.find('${1}')

snippet done
options word
	.done(af${0});

snippet remove
options word
	this.remove()

snippet render
options word
	this.render()

snippet trigger
options word
	this.trigger('${1}');

snippet load
options word
	this.load()

snippet ev+
	'${1:#:click} [name=${2}]': '${3}',
	ev+${0}

snippet on+
options word
	.on('${1:event}', a${2});
	on+${0}

snippet iO
options word
	indexOf('${1}') ${0}

snippet la
	location.assign(${1});

snippet qs
	queryString.parse(location.search)

snippet wt
	$.when(${1})done${0}

snippet todo
	alert('TODO: ${0}');

# JSON Format
snippet jsonformat
	{
	  "results": {
	    "apiVersion": "1.00",
	    "returnCode": "0000",
	    "responseDatetime": "${1:#:20150108204305}",
	    "${2}": ${3}
	  }
	}

