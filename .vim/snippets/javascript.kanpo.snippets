snippet provisioning
	import $ from 'jquery';
	import assign from 'lodash/object/assign';
	import filter from 'lodash/collection/filter';
	import find from 'lodash/collection/find';
	import reduce from 'lodash/collection/reduce';
	import some from 'lodash/collection/some';
	import sortBy from 'lodash/collection/sortBy';
	import clone from 'lodash/lang/clone';
	import escape from 'lodash/string/escape';
	import omit from 'lodash/object/omit';
	import queryString from 'query-string';
	import pick from 'lodash/object/pick';
	import find from 'lodash/collection/find';
	import map from 'lodash/collection/map';
	import throttle from 'lodash/function/throttle';

	import api from '../../common/api';
	import message from '../../common/message';
	import View from '../../common/View';
	// import sc from '../../common/siteCatalyst';
	import device from '../../module/device';
	import storage from '../../module/storage';
	import ua from '../../module/userAgent';
	import EditableList from '../../ui/EditableList'
	import dialog from '../../ui/dialog';
	import cancelConfirmDialog from '../../ui/dialog/cancelConfirmDialog';
	import toast from '../../ui/toast';
	import Window from '../../ui/Window';

	const API_CREATE = '/api/${1:フォルダ名}/create/';
	const API_READ = '/api/$1/read/';
	const API_UPDATE = '/api/$1/update/';
	const API_DELETE = '/api/$1/delete/';
snippet im+
	import ${1} form '${2}';
	im+${0}
snippet View
	/**
	 * ${1:画面名}
	 */
	export default class ${2} extends View {

		constructor(${3}) {
			super(assign({
				${4}
			}, $3));
		}

		m_load${0}
	}
snippet SceneCla
	/**
	 * ${1:画面名}
	 */
	export default class ${2:Scene} extends View {

		constructor(${3}) {
			super(assign({
				${4}
			}, $3));
			
			this.on(${5})

			this.load();
		}

	}
snippet assign
	assign({
		opt${0}
	})
snippet opt
	id: '${1}',
	className: '${2}',
	el: '${3}',
	title: '${4}'
	template: require('./${5}.ejs'),
	model: {${6}},
	search: {${7}},

	events: {
		ev+${0}
	}
	
snippet ev+
	'${1:#:click} [name=${2}]': '${3}',
	ev+${0}
snippet m
	/**${1}
	${2}(${3}) {
		${0}
	}
snippet m_load
options word
	/**
	 * APIロード
	 */
	load() {
		${0}
	}
snippet model
options word
	this.model.${0}

snippet index
options word
	indexOf('${1}') ${0}
snippet WindowCla
	/**
	 * ${1:Window名}
	 */
	export default class ${2:Window} extends Window {

		constructor(${3}) {
			super({
				id: '${4}',
				title: '${5}',
				model: {${6}},
				template: require('./${7}.ejs'),
				navRight: {name: 'edit', title: '変更する'},
				buttons: [
					{name: 'delete', title: '削除する', className: 'pull-left'},
				]
				
				events: {
					'click [name=${8}]': '${9}'
				}
			});

		}${0}
	}

# common
snippet api
	api(${1:API_URL_PATH}, {
		storeId: APP.storeId${2}
	}).done(${0});
snippet apierr
	api(${1:API_URL_PATH}, {
		storeId: APP.storeId,
		${2:POST_data}
	}, {
		indicator: ${3},
		errorTitle: '${4:errorTitle}',
		errorMessage: ${5},
		showErrorDialog: ${6}
	}).done(${0});

snippet cookie
	cookie.remove('${1}')

snippet loading
	loading.${1:show|hide}();

# module
snippet number
snippet checkbox
snippet dataFormat
snippet device
	device.isApp()
snippet mode
snippet regExpSjis
snippet sto_get
options word
	storage.get('${1}')
snippet sto_set
options word
	storage.set('${1}', {
		${0}
	})
snippet time
snippet timeFormat
snippet userAgent
snippet validate
	validate(${0})
# ui
snippet dialog
	dialog({
		opt_dialog${1}
	})${0}
snippet opt_dialog
options word
	id: ${1}
	title: '${2}',
	message: '${3}',
	confirm: ${4}
	model: {${5}},
	opt_btns${6}
	autoClose: ${0}
snippet opt_btns
	buttons: [
		{
			className: 'cancel',
			title: '編集を続ける',
			action: 'dismiss'
		},
		{
			className: 'primary',
			title: '${1}',
			action: 'ok'
		}
	],
snippet editableList
	new EditableList({
		id: '${1}',
		el: '${2}',
		itemTemplate: require('${3}.ejs'),
		type: ${4}
	})
	.on(${0})

snippet form
snippet Table
snippet Window
	Window({
		id: ${1},
		title: ${2},
		size: ${3:device.isAPP() ? 'full' : ''},
		template: ${4:require('./foo.ejs')},
		imgfile: ${5:'bar.png'},
		buttons: '',
	}).on('close', () => location.replace(${6:path})).show();
snippet dateField
snippet help
snippet link
snippet placeholder
snippet select
snippet toast
	toast('${1:メッセージ}')
snippet toggle
snippet ef
	this.$el.find('${1}')
snippet on
options word
	on('${1:event}', a${0});
snippet la
	location.assign(${1});
snippet qs
	queryString.parse(location.search)
snippet $wt
	$.when().then(${0})
