" vim-qfstatusline {{{
set laststatus=2
set cmdheight=1
" }}}
" syntastic {{{
let g:syntastic_check_on_open=0
let g:syntastic_check_on_save=1
let g:syntastic_check_on_wq=0
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=6
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_mode_map = {
      \   'mode': 'active',
      \   'active_filetypes': ['javascript'],
      \   'passive_filetypes': []
      \ }

" }}}
" vim-quickrun {{{
" runner/vimproc/updatetime で出力バッファの更新間隔をミリ秒で設定できます
" updatetime が一時的に書き換えられてしまうので注意して下さい
let g:quickrun_config = {
\ '_': {
\   'hook/close_buffer/enable_empty_data': 1,
\   'hook/close_buffer/enable_failure': 1,
\   'outputter': 'multi:buffer:quickfix',
\   'outputter/buffer/close_on_empty': 1,
\   'outputter/buffer/split': ':botright',
\   'runner': 'vimproc',
\   'runner/vimproc/updatetime' : 60
\ },
\ 'markdown': {
\   'outputter' : 'browser',
\   'command': 'pandoc',
\   'cmdopt': '-s --template=github --css=github.css --from=markdown --to=html',
\   'exec': '%c %o %s %a'
\ },
\ 'java': {
\   'exec' : ['javac -J-Dfile.encoding=UTF8 %o %s', '%c -Dfile.encoding=UTF8 %s:t:r %a']
\ },
\ 'javascript/watchdogs_checker': {
\   'type': 'watchdogs_checker/javascript'
\ },
\ 'coffee': {
\   'command': 'coffee',
\   'cmdopt': '-pb'
\ },
\ 'babel': {
\  'cmdopt': '--stage 1',
\  'exec': 'babal %o %s | node'
\ },
\ 'watchdogs_checker/_': {
\   'hook/copen/enable_exist_data' : 1,
\   'hook/qfstatusline_update/enable_exit': 1,
\   'hook/qfstatusline_update/priority_exit': 4
\ },
\ 'watchdogs_checker/javascript': {
\   'command': 'eslint',
\   'cmdopt': '--cache --cache-location '. $HOME .'/.cache/eslint/.eslintcache --format compact --max-warnings 1 --no-color --no-ignore --quiet --config '. $HOME .'/.eslintrc.js  --fix',
\   'errorformat': '%E%f: line %l\, col %c\, Error - %m,%W%f: line %l\, col %c\, Warning - %m,%-G%.%#',
\   'exec': '%c %o %s:p'
\  },
\  '*': {
\    'split': ''
\  }
\}
call watchdogs#setup(g:quickrun_config);

" <C-c> で実行を強制終了させる
" quickrun.vim が実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
" }}}
" Unite {{{
" http://blog.remora.cx/2010/12/vim-ref-with-unite.html
" 入力モードで開始する
let g:unite_enable_start_insert=0
" ヒストリー/ヤンク機能を有効化
let g:unite_source_history_yank_enable =1
" matcher をデフォルトにする
call unite#custom#source('file', 'matchers', "matcher_default")"
" ウィンドウを分割して開く
"au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
"au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
"au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
"au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
"au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
"au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" }}}
" solarized {{{
let g:solarized_termcolors=16
let g:solarized_termtrans=1
let g:solarized_degrade=0
let g:solarized_bold=1
let g:solarized_underline=1
let g:solarized_italic=1
let g:solarized_contrast='normal'
let g:solarized_visibility='normal'
autocmd VimEnter,Colorscheme * hi SpecialKey gui=none guibg=#002b36
" }}}
" Airline {{{
"let g:airline_section_a = airline#section#create(['mode','','branch'])
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:unite_force_overwrite_statusline = 0

let g:vimfiler_force_overwrite_statusline = 0
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif


set guifont=Ricty\ Regular\ for\ Powerline:h14
let g:Powerline_symbols = 'fancy'
set t_Co=256
let g:airline_theme='dark'
let g:airline_left_sep = '⮀'
let g:airline_right_sep = '⮂'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.branch = '⭠'
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮀'
" /=Airline }}}1
" qfixhowm {{{
" ファイル拡張子をmdにする
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
" howm_dir
let howm_dir = '~/Dropbox/howm'
" ファイルタイプをmarkdownにする
let QFixHowm_FileType = 'markdown'
" タイトル記号
let QFixHowm_Title = '#'
" タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
" MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title['mkd'] = '^###[^#]'
" grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title['mkd_regxp'] = '^###[^#]'

let QFixHowm_ListReminder_ScheExt = '[-@+!~.]'
" QFixHowm + Markdown
"
" }}}
" Previm {{{
" let g:previm_open_cmd = 'open -a Chrome'
" }}}
" neocomplete {{{
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" 補完が自動で開始される文字数
" let g:neocomplete#auto_completion_start_length = 3
" smarrt case有効化。 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplete#enable_smart_case = 1
" camle caseを有効化。大文字を区切りとしたワイルドカードのように振る舞う
let g:neocomplete#enable_camel_case_completion = 1
" _(アンダーバー)区切りの補完を有効化
let g:neocomplete#enable_underbar_completion = 1
" シンタックスをキャッシュするときの最小文字長を3に
let g:neocomplete#min_syntax_length = 3
" Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" neocompleteを自動的にロックするバッファ名のパターン
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" -入力による候補番号の表示
let g:neocomplete#enable_quick_match = 1
" 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
let g:neocomplete#enable_auto_select = 0
"ポップアップメニューで表示される候補の数。初期値は100
" let g:neocomplete#max_list = 20


" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default'    : '',
  \ 'vimshell'   : $HOME.'/.vimshell_hist',
  \ 'scheme'     : $HOME.'/.gosh_completions',
  \ 'php'        : '~/Dropbox/dict/php.dict,~/Dropbox/dict/wordpress.dict',
  \ 'javascript' : '~/Dropbox/dict/javascript.dict,~/Dropbox/dict/jquery.dict,~/Dropbox/dict/lodash.dict,~/Dropbox/dict/react.dict,~/Dropbox/dict/kanpo.dict',
  \ 'ejs'        : $HOME.'/Dropbox/kanpo.dict'
  \ }


" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'


if !exists('g:neocomplete#text_mode_filetypes')
    let g:neocomplete#text_mode_filetypes = {}
endif
let g:neocomplete#text_mode_filetypes = {
  \ 'markdown': 1,
  \ 'text': 1
  \ }

" Recommended key-mappings.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#smart_close_popup() . "\<CR>"
endfunction
" Plugin key-mappings.
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr><C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr><C-l> pumvisible() ? neocomplete#complete_common_string() : "\<Right>"
inoremap <expr><C-g> neocomplete#undo_completion()
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> pumvisible() ? neocomplete#smart_close_popup() : "\<Left>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><C-e>  neocomplete#cancel_popup()
"Space to select items:
inoremap <expr><Space> pumvisible() ? neocomplete#close_popup()."\<Space>" : "\<Space>"
inoremap <expr><C-Space> pumvisible() ? neocomplete#close_popup() : ""

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

au BufRead,BufNewFile *.json set filetype=javascript

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" neocomplete-php confing
let g:neocomplete_php_locale = 'ja'
" }}}
" neosunippet-snippets {{{
imap ,, <Plug>(neosnippet_expand_or_jump)
smap ,, <Plug>(neosnippet_expand_or_jump)
xmap ,, <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = '~/.vim/bundle/vim-snippets/snippets'

" }}}
" taglist {{{
set tags=tags
" ctagsのコマンド
let Tlist_Ctags_Cmd = '/usr/local/Cellar/ctags/5.8_1/bin/ctags'
"右側にtag listのウインドうを表示する
let Tlist_Use_Right_Window = 1
"taglistのウインドウだけならVimを閉じる
let Tlist_Exit_OnlyWindow = 1
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'
" let s:tlist_def_javascript_settings = 'javascript;f:function;c:class;m:method;p:property'

" }}}
" vim-trailing-whitespace {{{
highlight default ExtraWhitespace ctermbg=darkred guibg=#d33682
" ファイル保存時に余分なスペースを削除する
autocmd BufWritePre * :FixWhitespace
" }}}
" grep {{{
" 自動的にquickfix-windowを開く
autocmd QuickFixCmdPost *grep* cwindow
" }}}
" copyPath {{{
function! CopyPath()
  let @*=expand('%:P')
endfunction

function! CopyFullPath()
  let @*=expand('%:p')
endfunction

function! CopyFileName()
  let @*=expand('%:t')
endfunction

command! CopyPath     call CopyPath()
command! CopyFullPath call CopyFullPath()
command! CopyFileName call CopyFileName()

" }}}
